compare.times["npt", "C4"] <- get.hours(x4(npt.same, "C4"))
compare.times["npt", "M4"] <- get.hours(x4(npt.same, "M4"))
# FREESURFER HIRES, I
fsh1 <- read.csv("final-data/freesurfer.hires.I_AWSADRC_sD.csv")
# can't do same only: no same AWS
compare.times["fsh1", "neuron"] <- get.hours(neuron(fsh1))
compare.times["fsh1", "aws"] <- get.hours(aws(fsh1))
compare.times["fsh1", "C4"] <- get.hours(x4(fsh1, "C4"))
compare.times["fsh1", "M4"] <- get.hours(x4(fsh1, "M4"))
compare.times
compare.times["fsh2", "aws"] <- get.hours(fsh2.aws.same)
fsh2.aws.same <- read.csv("final-data/freesurfer.hires.II_AWSonly_S.csv")
compare.times["fsh2", "aws"] <- get.hours(fsh2.aws.same)
compare.times
fsh2.neuron <- read.csv("final-data/freesurfer.hires.II_ADRConly_S.csv")
?read.csv
read.csv("final-data/freesurfer.hires.II_ADRConly_S.csv")
fsh2.neuron <- read.table("final-data/freesurfer.hires.II_ADRConly_S.csv")
fsh2.neuron
fsh2.neuron <- read.table("final-data/freesurfer.hires.II_ADRConly_S.csv", header=TRUE)
fsh2.neuron
fsh2.neuron <- read.table("final-data/freesurfer.hires.II_ADRConly_S.csv", sep=",", header=TRUE)
fsh2.neuron <- read.table("final-data/freesurfer.hires.II_ADRConly_S.csv")
fsh2.neuron
fsh2.neuron <- read.csv("final-data/freesurfer.hires.II_ADRConly_S.csv")
fsh2.neuron
compare.times["fsh2", "neuron"] <- get.hours(fsh2.neuron)
source('/mnt/adrc/ec2/R/compare-times.R', echo=TRUE)
compare.times
fsh2.aws.diff <- read.csv("final-data/freesurfer.hires.II_AWSonly_D.csv")
fsh2.aws.diff.B <- fsh.aws.diff[fsh.aws.diff$part=="B", ]
fsh2.aws.diff <- read.csv("final-data/freesurfer.hires.II_AWSonly_D.csv")
fsh2.aws.diff.A <- fsh.aws.diff[fsh.aws.diff$part=="A", ]
fsh2.aws.diff.B <- fsh.aws.diff[fsh.aws.diff$part=="B", ]
fsh2.aws.diff <- read.csv("final-data/freesurfer.hires.II_AWSonly_D.csv")
fsh2.aws.diff.A <- fsh2.aws.diff[fsh2.aws.diff$part=="A", ]
fsh2.aws.diff.B <- fsh2.aws.diff[fsh2.aws.diff$part=="B", ]
fsh2.aws.diff.A
fsh2.aws.diff
fsh2.aws.diff <- read.csv("final-data/freesurfer.hires.II_AWSonly_D.csv")
fsh2.aws.diff.A <- fsh2.aws.diff[fsh2.aws.diff$part=="A", ]
fsh2.aws.diff.B <- fsh2.aws.diff[fsh2.aws.diff$part=="B", ]
fsh2.aws.diff
fsh2.aws.diff <- read.csv("final-data/freesurfer.hires.II_AWSonly_D.csv")
fsh2.aws.diff <- read.csv("final-data/freesurfer.hires.II_AWSonly_D.csv")
fsh2.aws.diff.A <- fsh2.aws.diff[fsh2.aws.diff$part=="A", ]
fsh2.aws.diff.B <- fsh2.aws.diff[fsh2.aws.diff$part=="B", ]
fsh2.aws.diff
v
v
v
fsh2.aws.diff <- read.csv("final-data/freesurfer.hires.II_AWSonly_D.csv")
fsh2.aws.diff.A <- fsh2.aws.diff[fsh2.aws.diff$part=="A", ]
fsh2.aws.diff.B <- fsh2.aws.diff[fsh2.aws.diff$part=="B", ]
fsh2.aws.diff
fsh2.aws.diff.A <- fsh2.aws.diff[fsh2.aws.diff$part=="A", ]
fsh2.aws.diff.B <- fsh2.aws.diff[fsh2.aws.diff$part=="B", ]
A.mean <- get.hours(fsh.2.aws.diff.A)
A.mean <- get.hours(fsh2.aws.diff.A)
B.mean <- get.hours(fsh2.aws.diff.B)
source('/mnt/adrc/ec2/R/compare-times.R', echo=TRUE)
compare.times
a.MAEN
A.mean
B.mean
fs2.aws.diff.sum <- A.mean + B.mean
fsh2.aws.diff.sum
source('/mnt/adrc/ec2/R/compare-times.R', echo=TRUE)
compare.times
source('/mnt/adrc/ec2/R/compare-times.R', echo=TRUE)
compare.times
source('/mnt/adrc/ec2/R/compare-times.R', echo=TRUE)
compare.times
source('/mnt/adrc/ec2/R/compare-times.R', echo=TRUE)
compare.times
fsh2.neuron
?write.csv
write.csv(fsh2.neuron, "final-data/freesurfer.hires.II_ADRConly_S.csv")
source('/mnt/adrc/ec2/R/compare-times.R', echo=TRUE)
compare.times
source('/mnt/adrc/ec2/R/ec2_graphs.R', echo=TRUE)
dev.off()
my.png("figures/freesurfer_same.png")
plot.x(freesurfer.costs.aws.same, "Freesurfer (same)", x.label="Instance Type",
y.label="Price ($)", y.lim=c(0, 1.1))
dev.off()
my.png("figures/freesurfer_diff.png")
plot.x(freesurfer.costs.aws.diff, "Freesurfer (different)",
x.label="Instance Type", y.label="Price ($)", y.lim=c(0, 1.1))
dev.off()
freesurfer.costs.aws.diff <- freesurfer.costs.aws[
freesurfer.costs.aws$sameness=="different", ]
my.png("figures/freesurfer_same.png")
plot.x(freesurfer.costs.aws.same, "Freesurfer (same)", x.label="Instance Type",
y.label="Price ($)", y.lim=c(0, 1.1))
dev.off()
my.png("figures/freesurfer_diff.png")
plot.x(freesurfer.costs.aws.diff, "Freesurfer (different)",
x.label="Instance Type", y.label="Price ($)", y.lim=c(0, 1.1))
dev.off()
plot.x(freesurfer.costs.aws.same, "Freesurfer (same)", x.label="Instance Type",
y.label="Price ($)", y.lim=c(0, 1.1))
freesurfer.costs.aws.same <- freesurfer.costs.aws[
freesurfer.costs.aws$sameness=="same", ]
plot.x(freesurfer.costs.aws.same, "Freesurfer (same)", x.label="Instance Type",
y.label="Price ($)", y.lim=c(0, 1.1))
plot.x(half.costs, "Half-capacity (same)", x.label="Instance Type",
y.label="Price ($)", y.lim=c(0, 1.1))
half <- read.csv("final-data/freesurfer-half_AWSonly_S.csv")
half.summary <- summarySE(half, measurevar="real",
groupvars=c("instance", "sameness"))
half.summary$ncpus <- get.cpus(half.summary$instance)
half.costs <- price.summary(half.summary)
half.costs[is.na(half.costs)] <- 0
# because we only ran half, they cost more
half.costs$price.per <- 2 * half.costs$price.per
plot.x(half.costs, "Half-capacity (same)", x.label="Instance Type",
y.label="Price ($)", y.lim=c(0, 1.1))
dev.off()
plot.x(half.costs, "Half-capacity (same)", x.label="Instance Type",
y.label="Price ($)", y.lim=c(0, 1.1))
my.png("figures/freesurfer_half_same.png")
plot.x(half.costs, "Half-capacity (same)", x.label="Instance Type",
y.label="Price ($)", y.lim=c(0, 1.1))
dev.off()
dev.off()
dev.off()
plot.x(freesurfer.costs.aws.same, "Freesurfer (same)", x.label="Instance Type",
y.label="Price ($)", y.lim=c(0, 1.1))
my.png("figures/freesurfer_same.png")
plot.x(freesurfer.costs.aws.same, "Freesurfer (same)", x.label="Instance Type",
y.label="Price ($)", y.lim=c(0, 1.1))
dev.off()
fs.h.dd.costs.aws
fs.h.dd <- read.csv("final-data/freesurfer.hires.I_AWSADRC_sD.csv")
fs.h.dd.summary <- summarySE(fs.h.dd, measurevar="real",
groupvars=c("instance", "sameness"))
fs.h.dd.summary$hours <- fs.h.dd.summary$real / 3600
fs.h.dd.summary$hours.ci <- fs.h.dd.summary$ci / 3600
fs.h.dd.summary.aws <- fs.h.dd.summary[fs.h.dd.summary$instance!="adrc" &
fs.h.dd.summary$instance!="panuc", ]
fs.h.dd.summary.aws$ncpus <- get.cpus(fs.h.dd.summary.aws$instance)
fs.h.dd.costs.aws <- price.summary(fs.h.dd.summary.aws)
fs.h.dd.costs.aws
plot.x(fs.h.dd.costs.aws, "Freesurfer hires pipeline, downsampled (different)",
x.label="Instance Type",
y.label="Price ($)",
y.lim=c(0, 1.7))
my.png("figures/freesurfer-hires-downsampled-diff.png")
plot.x(fs.h.dd.costs.aws, "Freesurfer hires pipeline, downsampled (different)",
x.label="Instance Type", y.label="Price ($)", y.lim=c(0, 1.7))
dev.off()
plot.x(fs.h.sh.costs, "Freesurfer hires pipeline, hires (same)",
x.label="Instance Type", y.label="Price ($)", y.lim=c(0, 2.5))
fs.h.sh <- read.csv("final-data/freesurfer.hires.II_AWSonly_S.csv")
fs.h.sh.summary <- summarySE(fs.h.sh, measurevar="real", groupvars="instance")
fs.h.sh.summary$hours <- fs.h.sh.summary$real / 3600
fs.h.sh.summary$hours.ci <- fs.h.sh.summary$ci / 3600
fs.h.sh.summary <- fs.h.sh.summary[fs.h.sh.summary$instance!="adrc",]
fs.h.sh.summary$ncpus <- get.cpus(fs.h.sh.summary$instance)
fs.h.sh.costs <- price.summary(fs.h.sh.summary)
plot.x(fs.h.sh.costs, "Freesurfer hires pipeline, hires (same)",
x.label="Instance Type", y.label="Price ($)", y.lim=c(0, 2.5))
my.png("figures/freesurfer-hires-hires-same.png")
plot.x(fs.h.sh.costs, "Freesurfer hires pipeline, hires (same)",
x.label="Instance Type", y.label="Price ($)", y.lim=c(0, 2.5))
dev.off()
hires <- read.csv("final-data/freesurfer.hires.II_AWSonly_D.csv")
head(hires)
hires <- read.csv("final-data/freesurfer.hires.II_AWSonly_D.csv")
hires.a <- hires[hires$part=="A", ]
hires.b <- hires[hires$part=="B", ]
hires.a.summary <- summarySE(hires.a, measurevar="real", groupvars="instance")
hires.b.summary <- summarySE(hires.b, measurevar="real", groupvars="instance")
hires.a.summary
hires <- read.csv("final-data/freesurfer.hires.II_AWSonly_D.csv")
hires.a <- hires[hires$part=="A", ]
hires.b <- hires[hires$part=="B", ]
hires.a.summary <- summarySE(hires.a, measurevar="real", groupvars="instance")
hires.b.summary <- summarySE(hires.b, measurevar="real", groupvars="instance")
hires.summary <- data.frame(hires.a.summary$instance)
colnames(hires.summary) <- "instance"
hires.summary$N <- hires.a.summary$N + hires.b.summary$N
hires.summary$real <- hires.a.summary$real + hires.b.summary$real
# to sum the SDs, we take the sum of the variances
hires.summary$sd <- (hires.a.summary$sd ** 2 + hires.a.summary$sd ** 2) ** 0.5
# calculate the 95% confidence interval from summed variances
hires.summary$ci <- (hires.a.summary$ci ** 2 + hires.b.summary$ci ** 2) ** 0.5
fs.h.dh.summary <- hires.summary
fs.h.dh.summary$ncpus <- get.cpus(hires.summary$instance)
fs.h.dh.costs <- price.summary(fs.h.dh.summary)
fs.h.dh.summary$N.adj <- fs.h.dh.summary$N / 2
fs.h.dh.summary
plot.x(fs.h.dh.costs, "Freesurfer hires pipeline, hires (different)",
x.label="Instance Type", y.label="Price ($)", y.lim=c(0, 2.5))
fs.h.dh.costs
plot.x(fs.h.dh.costs, "Freesurfer hires pipeline, hires (different)",
x.label="Instance Type", y.label="Price ($)", y.lim=c(0, 3))
plot.x(fs.h.dh.costs, "Freesurfer hires pipeline, hires (different)",
source('/mnt/adrc/ec2/R/ec2_graphs.R', echo=TRUE)
price.summary
fs.h.dh.costs <- price.summary(fs.h.dh.summary)
fs.h.dh.costs
source('/mnt/adrc/ec2/R/ec2_graphs.R', echo=TRUE)
fs.h.dh.costs
plot.x(fs.h.dh.costs, "Freesurfer hires pipeline, hires (different)",
x.label="Instance Type", y.label="Price ($)", y.lim=c(0, 2.5))
hires.a.summary
hires.a.summary/3600
hires.n.summary
hires.b.summary
hires.b.summary/3600
fs.h.dh.summary <- hires.summary
fs.h.dh.summary
fs.h.dh.summary$real
fs.h.dh.summary$real/3600
fs.h.dh.costs
price.per - c(1.4844, 1.4775, 1.8844, 2.045)
fs.h.dh.costs$price.per - c(1.4844, 1.4775, 1.8844, 2.045)
get.prices(fs.hd.dh.costs$instance)
get.prices(fs.h.dh.costs$instance)
plot.x(fs.h.dh.costs, "Freesurfer hires pipeline, hires (different)",
x.label="Instance Type", y.label="Price ($)", y.lim=c(0, 2.5))
fs.h.dh.costs$price.ci
str(fs.h.dh.costs$price.ci)
str(fs.h.dh.costs$price.per)
fs.h.dh.costs$price.per - fs.h.dh.costs$price.ci
fs.h.dh.costs$price.per + fs.h.dh.costs$price.ci
source('/mnt/adrc/ec2/R/ec2_graphs.R', echo=TRUE)
hires <- read.csv("final-data/freesurfer.hires.II_AWSonly_D.csv")
hires.a <- hires[hires$part=="A", ]
hires.b <- hires[hires$part=="B", ]
hires.a.summary <- summarySE(hires.a, measurevar="real", groupvars="instance")
hires.b.summary <- summarySE(hires.b, measurevar="real", groupvars="instance")
hires.summary <- data.frame(hires.a.summary$instance)
colnames(hires.summary) <- "instance"
hires.summary$N <- hires.a.summary$N + hires.b.summary$N
hires.summary$N.adj <- hires.summary$N / 2
hires.summary$real <- hires.a.summary$real + hires.b.summary$real
# to sum the SDs, we take the sum of the variances, and square toot that.
hires.summary$sd <- (hires.a.summary$sd ** 2 + hires.a.summary$sd ** 2) ** 0.5
# calculate the 95% confidence interval from summed CIs
hires.summary$ci <- (hires.a.summary$ci ** 2 + hires.b.summary$ci ** 2) ** 0.5
fs.h.dh.summary <- hires.summary
fs.h.dh.summary$ncpus <- get.cpus(hires.summary$instance)
fs.h.dh.costs <- price.summary(fs.h.dh.summary)
my.png("figures/freesurfer-hires-hires-different.png")
plot.x(fs.h.dh.costs, "Freesurfer hires pipeline, hires (different)",
x.label="Instance Type", y.label="Price ($)", y.lim=c(0, 2.5))
dev.off()
plot.x(fs.h.dh.costs, "Freesurfer hires pipeline, hires (different)",
x.label="Instance Type", y.label="Price ($)", y.lim=c(0, 2.5))
size.order(fs.h.dh.costs)
ggplot(size.order(fs.h.dh.costs), aes(x=order, y=price.per, fill=instance)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=price.per-price.ci, ymax=price.per+price.ci,
width=0.2)) +
theme(text = element_text(size=35),
legend.position = "none") +
scale_fill_manual(values = myColors) +
xlim(labels = as.character(size.order(fs.h.dh.costs)$instance))
fs.h.dh.costs$price.per+fs.h.dh.costs$price.ci
plot.x(fs.h.dh.costs, "Freesurfer hires pipeline, hires (different)",
x.label="Instance Type", y.label="Price ($)", y.lim=c(0, 3.5))
source('/mnt/adrc/ec2/R/ec2_graphs.R', echo=TRUE)
source('/mnt/adrc/ec2/R/ec2_graphs.R', echo=TRUE)
source('/mnt/adrc/ec2/R/ec2_graphs.R', echo=TRUE)
plot.x(bpx.summary.same, "bedpostx (same)", x.label="Instance Type",
y.label="Time (h)", y.lim=c(0, 51))
plot.t(bpx.summary.same, "bedpostx (same)", x.label="Instance Type",
y.label="Time (h)", y.lim=c(0, 51))
source('/mnt/adrc/ec2/R/ec2_graphs.R', echo=TRUE)
my.png("figures/bedpostx_same.png")
plot.t(bpx.summary.same, "bedpostx (same)", x.label="Instance Type",
y.label="Time (h)", y.lim=c(0, 51))
dev.off()
size.order(bpx.summary.same)
bpx.summary.same
order.large
myColors
bpx.summary.same
bpx.summary.same$instance
match(bpx.summary.same$instance, order.large)
sort(match(bpx.summary.same$instance, order.large))
order.large[sort(match(bpx.summary.same$instance, order.large))]
as.character(order.large[sort(match(bpx.summary.same$instance, order.large))])
as.factor(as.character(order.large[sort(match(bpx.summary.same$instance, order.large))]))
bpx.summary.sameas.factor(as.character(order.large[sort(match(bpx.summary.same$instance, order.large))]))
bpx.summary.same[as.factor(as.character(order.large[sort(match(bpx.summary.same$instance, order.large))])),]
as.factor(as.character(order.large[sort(match(bpx.summary.same$instance, order.large))]))
as.factor(as.character(order.large[sort(match(bpx.summary.same$instance, order.large))]))[1]
bpx.summary.same[as.factor(as.character(order.large[sort(match(bpx.summary.same$instance, order.large))]))[1], ]
bpx.summary.same
bpx.summary.same$instance
bpx.summary.same$instance == c("workstation")
as.factor(as.character(order.large[sort(match(bpx.summary.same$instance, order.large))]))[1]
as.factor(as.character(order.large[sort(match(bpx.summary.same$instance, order.large))]))
str(as.factor(as.character(order.large[sort(match(bpx.summary.same$instance, order.large))])))
str(as.factor(as.character(order.large[sort(match(freesurfer.costs.aws$instance, order.large))])))
str(as.factor(as.character(order.large[sort(match(freesurfer.costs.aws.diff$instance, order.large))])))
bpx.summary.same
bpx.summary.same$instance
str(bpx.summary.same$instance)
source('/mnt/adrc/ec2/R/ec2_graphs.R', echo=TRUE)
plot.t(bpx.summary.same, "bedpostx (same)", x.label="Instance Type",
y.label="Time (h)", y.lim=c(0, 51))
source('/mnt/adrc/ec2/R/ec2_graphs.R', echo=TRUE)
bpx.summary.same
size.order(bpx.summary.same)
str(size.order(bpx.summary.same))
str(size.order(freesurfer.costs.aws))
source('/mnt/adrc/ec2/R/ec2_graphs.R', echo=TRUE)
str(bpx.summary.diff)
str(bpx.summary.same)
size.order(bpx.summary.same)
size.order <- function(df)
{
order.instances <- as.factor(as.character(
order.large[sort(match(df$instance, order.large))]))
# as.factor(as.character(y[sort(match(x, y))]))
temp <- df[order.instances, ]
temp$order <- 1:dim(temp)[1]
return(temp)
}
size.order(bpx.summary.same)
match(bpx.summary.same, order.large)
match(bpx.summary.same$instance, order.large)
sort(match(bpx.summary.same$instance, order.large))
order.large[sort(match(bpx.summary.same$instance, order.large))]
str(order.large[sort(match(bpx.summary.same$instance, order.large))])
order.large
order.large[1]
order.large[c(1, 9)]
as.factor(order.large[sort(match(bpx.summary.same$instance, order.large))])
str(as.factor(order.large[sort(match(bpx.summary.same$instance, order.large))]))
as.factor(as.character(order.large[sort(match(bpx.summary.same$instance, order.large))])))
as.factor(as.character(order.large[sort(match(bpx.summary.same$instance, order.large))]))
levels(as.factor(as.character(order.large[sort(match(bpx.summary.same$instance, order.large))])))
str(as.factor(as.character(order.large[sort(match(bpx.summary.same$instance, order.large))])))
order.lage
order.large
order.large <- as.ordered(c("workstation",
"C4.large", "C4.xlarge", "C4.4xlarge", "C4.8xlarge",
"M4.large", "M4.xlarge", "M4.4xlarge", "G2.2xlarge"))
order.large
source('/mnt/adrc/ec2/R/ec2_graphs.R', echo=TRUE)
order.large <- as.ordered(levels = c("workstation",
"C4.large", "C4.xlarge", "C4.4xlarge", "C4.8xlarge",
"M4.large", "M4.xlarge", "M4.4xlarge", "G2.2xlarge"))
order.large <- factor(levels = c("workstation",
"C4.large", "C4.xlarge", "C4.4xlarge", "C4.8xlarge",
"M4.large", "M4.xlarge", "M4.4xlarge", "G2.2xlarge"))
# COLORS
order.large
source('/mnt/adrc/ec2/R/ec2_graphs.R', echo=TRUE)
instances <- factor(levels = c("workstation",
"C4.large", "C4.xlarge", "C4.4xlarge", "C4.8xlarge",
"M4.large", "M4.xlarge", "M4.4xlarge", "G2.2xlarge"))
order.large <- levels(instances)
order.large
source('/mnt/adrc/ec2/R/ec2_graphs.R', echo=TRUE)
order.large <- as.factor(levels(instances))
order.large
source('/mnt/adrc/ec2/R/ec2_graphs.R', echo=TRUE)
sort("workstation" "g2")
sort("workstation", "g2")
sort(c("workstation", "g2"))
sort(as.factor(c("workstation", "g2")))
sort(match(bpx.summary.same$instance, order.large))
levels(order.large)[sort(match(bpx.summary.same$instance, order.large))]
levels(order.large)[(match(bpx.summary.same$instance, order.large))]
(match(bpx.summary.same$instance, order.large))
match(bpx.summary.same$instance, order.large)
order.large[match(bpx.summary.same$instance, order.large)]
size.order <- function(df)
{
order.instances <- as.factor(as.character(
order.large[(match(df$instance, order.large))]))
# as.factor(as.character(y[sort(match(x, y))]))
temp <- df[order.instances, ]
temp$order <- 1:dim(temp)[1]
return(temp)
}
size.order(bpx.summary)
size.order(bpx.summary.same)
size.order <- function(df)
{
order.instances <- as.factor(as.character(
order.large[(match(df$instance, order.large))]))
# as.factor(as.character(y[sort(match(x, y))]))
temp <- df[order.instances, ]
temp$order <- 1:dim(temp)[1]
return(temp)
}
order.large[match(bpx.summary.same$instance, order.large)]
size.order(bpx.summary.same)
order.large[match(bpx.summary.same$instance, order.large)]
)
as.character(order.large[match(bpx.summary.same$instance, order.large)])
as.factor(as.character(order.large[match(bpx.summary.same$instance, order.large)]))
foo <- as.factor(as.character(order.large[match(bpx.summary.same$instance, order.large)]))
str(foo)
order.instances <- as.factor(as.character(
order.large[(match(df$instance, order.large))]), ordered=TRUE)
source('/mnt/adrc/ec2/R/ec2_graphs.R', echo=TRUE)
s
s
plot.t(bpx.summary.same, "bedpostx (same)", x.label="Instance Type",
y.label="Time (h)", y.lim=c(0, 51))
source('/mnt/adrc/ec2/R/ec2_graphs.R', echo=TRUE)
source('/mnt/adrc/ec2/R/compare-times.R', echo=TRUE)
source('/mnt/adrc/ec2/R/compare-times.R', echo=TRUE)
compare.times
fsh2.neuron <- read.csv("final-data/freesurfer.hires.II_ADRConly_SD.csv")
fsh2.neuron <- read.csv("final-data/freesurfer.hires.II_ADRConly_SD.csv")
fsh2.neur0on
fsh2.neuron
source('/mnt/adrc/ec2/R/compare-times.R', echo=TRUE)
compare.times
source('~/scratch/AWS-estimator/last-week/visualize-hourly.R', echo=TRUE)
pricing <- read.csv(args[1], sep="")
pricing <- read.table("~/scratch/AWS-estimator/last-week/pricing_start1023_usonly.txt",
header=TRUE)
ptx.favorable <- 7.754926 * 2
pricing$iXz <- as.factor(paste(pricing$instance, pricing$zone, sep="."))
price.per <- function(df, col)
{
if (! col %in% colnames(df))
stop(paste(col, "not in column names."))
num <-  NA
if (grepl("m4.large", col))
num <- 2 # n vCPU
else if (grepl("m4.xlarge", col))
num <- 4
else if (grepl("m4.2xlarge", col))
num <- 8
else if (grepl("m4.4xlarge", col))
num <- 16
else if (grepl("m4.10xlarge", col))
num <- 40
else if (grepl("c4.large", col))
num <- 2
else if (grepl("c4.xlarge", col))
num <- 4
else if (grepl("c4.2xlarge", col))
num <- 8
else if (grepl("c4.4xlarge", col))
num <- 16
else if (grepl("c4.8xlarge", col))
num <- 36
else if (grepl("g2.2xlarge", col))
num <- 1 # n GPU
else if (grepl("g2.8xlarge", col))
num <- 4
return(df[, col] / num)
}
prices.by.hour <- data.frame(matrix(ncol=length(levels(pricing$iXz)),
nrow=168))
colnames(prices.by.hour) <- levels(pricing$iXz)
n <- 0
for (f in levels(pricing$iXz))
{
for (h in 0:167)
{
price <- mean(pricing[pricing$iXz==f & pricing$hour==h, ]$price)
prices.by.hour[h + 1, f] <- price
n = n + 1
print(n / (length(levels(pricing$iXz)) * 168))
}
}
# just memory/compute
mc.pbh <- prices.by.hour[, grepl("^[mc]4", colnames(prices.by.hour))]
mc.pbh.adj <- mc.pbh
for (col in colnames(mc.pbh))
{
mc.pbh.adj[, col] <- price.per(mc.pbh, col)
}
mc.min <- apply(mc.pbh.adj, 1, min, na.rm=TRUE)
mc.mean <- apply(mc.pbh.adj, 1, mean, na.rm=TRUE)
# just gpu-enabled
g.pbh <- prices.by.hour[, grepl("^g2", colnames(prices.by.hour))]
g.pbh.adj <- g.pbh
for (col in colnames(g.pbh))
{
g.pbh.adj[, col] <- price.per(g.pbh, col)
}
g.min <- apply(g.pbh.adj, 1, min, na.rm=TRUE)
g.mean <- apply(g.pbh.adj, 1, mean, na.rm=TRUE)
prices <- data.frame(cbind(mc.min, g.min))
p.mean <- data.frame(cbind(mc.mean, g.mean))
prices$ratio <- prices$g.min / prices$mc.min
prices$good <- prices$ratio < ptx.favorable
p.mean$ratio <- p.mean$g.mean / p.mean$mc.mean
p.mean$good <- p.mean$ratio < ptx.favorable
sum(p.mean$good) #15 = 9%
png.out <- "start1023_usonly.png"
png(filename=png.out, width=7, height=3.5, units="in", res=300)
ggplot(prices, aes(x=1:168, y=ratio)) +
geom_line(size=0.8) +
geom_point(aes(color=prices$good)) +
#  geom_smooth() +
geom_hline(yintercept=ptx.favorable) +
labs(title="Ratio of cost per GPU to cost per vCPU, hourly over a week") +
ylab("GPU/vCPU") +
xlab("Day") +
scale_x_continuous(breaks=c(24*0:7),
limits=c(0, 168),
labels=c("S", "M", "T", "W", "Th", "F", "Sa", "S")) +
theme(legend.position="none")
dev.off()
sum(prices$ratio >= ptx.favorable)
168-111
